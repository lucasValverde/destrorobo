#include <webots/robot.h>
#include <webots/distance_sensor.h>
#include <webots/accelerometer.h>
#include <webots/motor.h>
#include <webots/supervisor.h>
#include <webots/supervisor.h>
#include <stdio.h>
#include <stdlib.h>
#include <webots/led.h>
#include <unistd.h>


#define TIME_STEP 60
#define MAX_SPEED 6.4
#define LEDS 10


typedef struct ObstaculoDetector {
    bool direita;
    bool esquerda;
} ObstaculoDetector;

static void step() {
    if (robotPasso(tempo_passo()) == -1) {
        wb_robot_cleanup();
        exit(EXIT_SUCCESS);
    }
}

static int tempo_passo() {

    static int tempo_passo = -1;
    if (tempo_passo == -1) {
        tempo_passo = (int)wb_robot_get_basic_time_step();
    }  
    return tempo_passo;
}

static void espera(double segundo) {

    double tempoInicio = wb_robot_get_time();
    do {
        step();
    } while (tempoInicio + segundo > wb_robot_get_time());
}

void setarSensors(WbDeviceTag* SensorProximidade){

  char names[8][4] = { "ps0", "ps1", "ps2", "ps3", "ps4", "ps5", "ps6", "ps7" };

    for (int i = 0; i < 8 ; i++) {
        SensorProximidade[i] = wb_robot_get_device(names[i]);
        wb_distance_sensor_enable(SensorProximidade[i], TIME_STEP);
    }
}

void defineCaixasPosicaoInicial(WbFieldRef* caixaCampo, double** posicaoInicialCaixa){

  for(int i = 0; i < 9; i++){
    double* posicao_box = wb_supervisor_field_get_sf_vec3f(caixaCampo[i]);
    
    for(int e = 0; e < 3; e++){
    
       posicaoInicialCaixa[i][e] = posicao_box[e];
    }
  }
}

void fireLed(WbDeviceTag* vetorLed) {

    for (int i = 0; i < LEDS; i++) {
        wb_led_set(vetorLed[i], true);
    }    
    espera(0.5);
}

void iniciarMotor(const WbDeviceTag* esquerdaMotor, const WbDeviceTag* direitaMotor){

    wb_motor_set_position(*direitaMotor, INFINITY);

    wb_motor_set_position(*esquerdaMotor, INFINITY);

    wb_motor_set_velocity(*direitaMotor, 0.0);

    wb_motor_set_velocity(*esquerdaMotor, 0.0);
}

void atualizaPosicaoCaixa(double* PosicaoInicial, double* PosicaoAtual){
    for(int i = 0; i < 3; i++){ 
        PosicaoInicial[i] = PosicaoAtual[i];  
    }
}

void verificaColisao (WbDeviceTag* proximitySensors, WbFieldRef* boxFields, double** boxInitialPositions, WbDeviceTag* vetorLed) {
  
    bool colidiu = false;
    bool caixaLeve = false;
    for(int i = 0; i < 8; i++){
        float sensorValue = wb_distance_sensor_get_value(proximitySensors[i]);
        if(sensorValue > 100){
            colidiu = true;
            break; 
        }
    }
    if(colidiu){
        for(int i = 0; i < 9; i++) {
            double* posicao = wb_supervisor_field_get_sf_vec3f(boxFields[i]);   
            for (int f = 0; f < 3; f++) {
                if(posicao[f] != boxInitialPositions[i][f]){        
                    caixaLeve = true;
                    atualizaPosicaoCaixa(boxInitialPositions[i],posicao);
                    break;
                }  
            }
        }
        if (caixaLeve) {
            fireLed(vetorLed);
        }            
    }
}

void defineCaixas(WbNodeRef* caixas, WbFieldRef* caixaCampo){

    char caixa[9][8] = { "caixa1", "caixa2", "caixa3", "caixa4", 
    "caixa5", "caixa6", "caixa7", "caixa8", "caixa9"};
  
    for (int i = 0; i < 9; i++) {
        caixas[i] = wb_supervisor_node_get_from_def(caixa[i]);
        caixaCampo[i] = wb_supervisor_node_get_field(caixas[i], "translation");
    }
}



void verificaObstaculos(WbDeviceTag* proximitySensors, ObstaculoDetector* ObstaculoDetector) {

    double proximitySensorValues[8];
 
    for (int i = 0; i < 8 ; i++){
        proximitySensorValues[i] = wb_distance_sensor_get_value(proximitySensors[i]);
    }
  
    bool esquerda = proximitySensorValues[5] > 80.0 || proximitySensorValues[6] > 80.0 || proximitySensorValues[7] > 80.0;

    bool direita = proximitySensorValues[0] > 80.0 || proximitySensorValues[1] > 80.0 || proximitySensorValues[2] > 80.0;
    
    ObstaculoDetector->esquerda = esquerda;
    ObstaculoDetector->direita = direita;
}


double** matrixBase(int l, int c){

    double** matrix = malloc(sizeof(double*) * l);
  
    for(int i = 0; i < l; i++){
        matrix[i] = malloc(sizeof(double) * c);
    }
  
    return matrix;
}

void defineLed(WbDeviceTag* vetorLed) {
    for (int i = 0; i < LEDS; i++)
        wb_led_set(vetorLed[i], false);
}

void setarLeds(WbDeviceTag* vetorLed){

    static const char* leds[LEDS] = { "led0", "led1", "led2", "led3", "led4", "led5", "led6", "led7", "led8", "led9" };
    for (int i = 0; i < LEDS; i++) {
        vetorLed[i] = wb_robot_get_device(leds[i]);
    }
}

void defineVelocidade(ObstaculoDetector* obstacle, WbDeviceTag* esquerdaMotor, WbDeviceTag* direitaMotor){
  
    double velocidadeEsquerda  = 0.5 * MAX_SPEED;
    double velocidadeDireita = 0.5 * MAX_SPEED;
  
    if (obstacle -> esquerda) {
        velocidadeEsquerda  += 0.5 * MAX_SPEED;
        velocidadeDireita -= 0.5 * MAX_SPEED;
    }
    else if (obstacle -> direita) {
        velocidadeEsquerda  -= 0.5 * MAX_SPEED;
        velocidadeDireita += 0.5 * MAX_SPEED;
    }
   
    wb_motor_set_velocity(*esquerdaMotor, velocidadeEsquerda);
    wb_motor_set_velocity(*direitaMotor, direitaSpeed);

}

int main(int argc, char **argv) {
 
    wb_robot_init();

    ObstaculoDetector* ObstaculoDetector = malloc(sizeof(ObstaculoDetector));
    WbDeviceTag direita_motor = wb_robot_get_device("right wheel motor");
    WbDeviceTag esquerda_motor = wb_robot_get_device("left wheel motor");

    WbDeviceTag proximitySensors[8];
    WbDeviceTag leds[LEDS];
   
    bool leds_values[LEDS];
  
    WbNodeRef caixas[9];
    WbFieldRef boxFields[9];
    double **boxInitialPositions = matrixBase(9,3);
  
    WbNodeRef robot_node = wb_supervisor_node_get_from_def("robo_fei");
    WbFieldRef robot_field = wb_supervisor_node_get_field(robot_node, "translation");
  
    setarSensors(proximitySensors);
    iniciarMotor(&esquerda_motor, &direita_motor);

    defineCaixas(caixas, boxFields);
    defineCaixasPosicaoInicial(boxFields, boxInitialPositions);
    setarLeds(leds);
  
    while (robotPasso(TIME_STEP) != -1) {
    
        defineLed(leds);
        verificaObstaculos(proximitySensors, ObstaculoDetector);
        defineVelocidade(ObstaculoDetector, &esquerda_motor, &direita_motor); 
        verificaColisao(proximitySensors,boxFields,boxInitialPositions,leds);   
    }   
    wb_robot_cleanup();
    return 0;
}
